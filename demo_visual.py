#!/usr/bin/env python3
"""
Demonstra√ß√£o visual do sistema de Reliable Multicast com Rel√≥gio de Lamport.
Mostra troca de mensagens entre processos com timestamps claros.
"""

import time
import threading
from process import DistributedProcess

def print_header():
    """Imprime cabe√ßalho da demonstra√ß√£o."""
    print("=" * 70)
    print("DEMONSTRA√á√ÉO: RELIABLE MULTICAST COM REL√ìGIO DE LAMPORT")
    print("=" * 70)
    print()

def demo_simple_communication():
    """Demonstra√ß√£o simples de comunica√ß√£o entre dois processos."""
    print("üöÄ Iniciando demonstra√ß√£o de comunica√ß√£o entre 2 processos...")
    print()
    
    processes = []
    
    try:
        # Cria dois processos
        process0 = DistributedProcess(0, port=9000)
        process1 = DistributedProcess(1, port=9001)
        processes.extend([process0, process1])
        
        # Inicia os processos
        process0.start(known_processes=[1])
        time.sleep(0.5)
        process1.start(known_processes=[0])
        time.sleep(1.0)
        
        print("‚úÖ Ambos os processos iniciados")
        print()
        
        # Aguarda descoberta
        time.sleep(1.0)
        
        # Processo 0 envia primeira mensagem
        print("üì§ Processo 0 enviando primeira mensagem...")
        process0.send_multicast_message("Ol√° do Processo 0! Como est√°?")
        time.sleep(2.0)
        
        # Processo 1 responde
        print("üì§ Processo 1 respondendo...")
        process1.send_multicast_message("Ol√° Processo 0! Estou bem, obrigado!")
        time.sleep(2.0)
        
        # Processo 0 envia outra mensagem
        print("üì§ Processo 0 enviando segunda mensagem...")
        process0.send_multicast_message("√ìtimo! Vamos testar o sistema distribu√≠do.")
        time.sleep(2.0)
        
        # Mostra logs finais
        print("\n" + "=" * 50)
        print("üìã LOG FINAL DOS EVENTOS (ordenados por Lamport Clock)")
        print("=" * 50)
        
        for i, process in enumerate(processes):
            events = process.get_event_log()
            delivered_events = [e for e in events if e['event_type'] == 'DELIVER']
            
            if delivered_events:
                print(f"\nüîç Processo {i} - Mensagens entregues:")
                for event in delivered_events:
                    print(f"   [Lamport: {event['lamport_time']:2d}] {event['description']}")
        
        # Estat√≠sticas
        print(f"\nüìä ESTAT√çSTICAS:")
        for i, process in enumerate(processes):
            stats = process.get_statistics()
            print(f"   Processo {i}: Lamport Clock = {stats['lamport_time']}, "
                  f"Eventos = {stats['event_count']}")
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")
    
    finally:
        # Limpa processos
        for process in processes:
            try:
                process.stop()
            except:
                pass
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da!")

def demo_three_processes():
    """Demonstra√ß√£o com tr√™s processos mostrando ordena√ß√£o Lamport."""
    print("\nüöÄ Iniciando demonstra√ß√£o com 3 processos...")
    print("   (Para demonstrar ordena√ß√£o por Rel√≥gio de Lamport)")
    print()
    
    processes = []
    
    try:
        # Cria tr√™s processos
        for i in range(3):
            process = DistributedProcess(i, port=9010 + i)
            processes.append(process)
        
        # Inicia todos os processos
        for i, process in enumerate(processes):
            others = [j for j in range(3) if j != i]
            process.start(known_processes=others)
            time.sleep(0.3)
            print(f"‚úÖ Processo {i} iniciado")
        
        print("\n‚è≥ Aguardando descoberta de processos...")
        time.sleep(2.0)
        
        # Simula eventos concorrentes
        print("\nüì§ Enviando mensagens concorrentes...")
        
        # Threads para envio simult√¢neo
        def send_messages(process, messages):
            for i, msg in enumerate(messages):
                time.sleep(i * 0.5)  # Pequenos delays diferentes
                process.send_multicast_message(msg)
        
        messages_p0 = ["Mensagem A do P0", "Mensagem C do P0"]
        messages_p1 = ["Mensagem B do P1", "Mensagem D do P1"]  
        messages_p2 = ["Mensagem E do P2"]
        
        thread0 = threading.Thread(target=send_messages, args=(processes[0], messages_p0))
        thread1 = threading.Thread(target=send_messages, args=(processes[1], messages_p1))
        thread2 = threading.Thread(target=send_messages, args=(processes[2], messages_p2))
        
        thread0.start()
        time.sleep(0.1)
        thread1.start()
        time.sleep(0.1)
        thread2.start()
        
        thread0.join()
        thread1.join()
        thread2.join()
        
        print("‚è≥ Aguardando processamento...")
        time.sleep(4.0)
        
        # Mostra ordena√ß√£o resultante
        print("\n" + "=" * 60)
        print("üìã ORDENA√á√ÉO FINAL POR REL√ìGIO DE LAMPORT")
        print("=" * 60)
        
        all_events = []
        for i, process in enumerate(processes):
            events = process.get_event_log()
            delivered_events = [e for e in events if e['event_type'] == 'DELIVER']
            all_events.extend(delivered_events)
        
        # Ordena por timestamp Lamport
        all_events.sort(key=lambda x: (x['lamport_time'], x['process_id']))
        
        if all_events:
            print("Ordem de entrega (mesma em todos os processos):")
            for i, event in enumerate(all_events, 1):
                print(f"   {i:2d}. [T:{event['lamport_time']:2d}] {event['description']}")
        else:
            print("‚ö†Ô∏è  Nenhuma mensagem foi entregue (problemas de conectividade)")
        
        print(f"\nüìä REL√ìGIOS FINAIS:")
        for i, process in enumerate(processes):
            stats = process.get_statistics()
            print(f"   Processo {i}: Lamport Clock = {stats['lamport_time']}")
    
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")
    
    finally:
        # Limpa processos
        for process in processes:
            try:
                process.stop()
            except:
                pass
        
        print("\n‚úÖ Demonstra√ß√£o com 3 processos conclu√≠da!")

def main():
    """Fun√ß√£o principal da demonstra√ß√£o."""
    print_header()
    
    print("Esta demonstra√ß√£o mostra:")
    print("‚Ä¢ Comunica√ß√£o confi√°vel entre processos distribu√≠dos")
    print("‚Ä¢ Rel√≥gio de Lamport para ordena√ß√£o de eventos")
    print("‚Ä¢ Multicast com acknowledgments")
    print("‚Ä¢ Entrega ordenada de mensagens")
    print()
    
    # Demonstra√ß√£o 1: Comunica√ß√£o simples
    demo_simple_communication()
    
    # Pausa entre demonstra√ß√µes
    print("\n" + "üîÑ" * 30)
    time.sleep(2.0)
    
    # Demonstra√ß√£o 2: Tr√™s processos com concorr√™ncia
    demo_three_processes()
    
    print("\n" + "=" * 70)
    print("üéâ TODAS AS DEMONSTRA√á√ïES CONCLU√çDAS!")
    print("   O sistema de Reliable Multicast com Rel√≥gio de Lamport")
    print("   est√° funcionando corretamente!")
    print("=" * 70)

if __name__ == '__main__':
    main() 